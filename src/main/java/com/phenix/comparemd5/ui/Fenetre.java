package com.phenix.comparemd5.ui;

import com.phenix.comparemd5.util.Utils;
import com.phenix.swing.FileDrop;
import java.awt.Color;
import java.io.File;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Fenêtre principale du programme.
 *
 * @author <a href="mailto:edouard128@hotmail.com">Edouard Jeanjean</a>
 */
public final class Fenetre extends JFrame {

    /**
     * Crée la fenêtre.
     */
    public Fenetre() {
        initComponents();

        // On centre la fenêtre.
        super.setLocationRelativeTo(null);

        //<editor-fold defaultstate="collapsed" desc="Evènement drag and drop pour SP_fichiers_sources.">
        new FileDrop(this.SP_fichiers_sources, files -> {
            initTableau(this.T_fichiers_sources, files);
        });
        //</editor-fold>

        //<editor-fold defaultstate="collapsed" desc="Evènement drag and drop pour SP_fichiers_destination.">
        new FileDrop(this.SP_fichiers_destination, files -> {
            initTableau(this.T_fichier_destination, files);

            boolean tout_est_ok = true;

            // Vérifie que les MD5 source et destination sont les mêmes...
            for (int i = 0; i < this.T_fichier_destination.getRowCount(); i++) {
                String nom_fichier = (String) this.T_fichier_destination.getValueAt(i, 0);
                String fichier_source_md5 = getMD5Source(nom_fichier);

                System.out.println(fichier_source_md5 + " == " + this.T_fichier_destination.getValueAt(i, 1));

                if (fichier_source_md5.equals(this.T_fichier_destination.getValueAt(i, 1))) {
                    this.T_fichier_destination.setValueAt("OK", i, 2);
                } else {
                    this.T_fichier_destination.setValueAt("BAD", i, 2);
                    tout_est_ok = false;
                }
            }

            if (tout_est_ok) {
                this.B_tout_est_ok.setBackground(Color.GREEN);
            } else {
                this.B_tout_est_ok.setBackground(Color.RED);
            }
        });
        //</editor-fold>
    }

    /**
     *
     * @param fichier
     * @return
     */
    private String getMD5Source(String fichier) {
        for (int i = 0; i < this.T_fichiers_sources.getRowCount(); i++) {

            String fichier_source = (String) this.T_fichiers_sources.getValueAt(i, 0);

            if (fichier_source.equals(fichier)) {
                return (String) this.T_fichiers_sources.getValueAt(i, 1);
            }
        }

        return "-1";
    }

    /**
     * Initialise un tableau.
     *
     * @param tableau Le tableau.
     * @param files Liste de fichier.
     */
    private void initTableau(JTable tableau, File[] files) {
        String[] columns = {"Fichier", "Hash", "OK"};

        DefaultTableModel model = new DefaultTableModel() {
            /**
             * Pour ne pas pouvoir modifier les colonnes.
             *
             * @param row
             * @param column
             * @return
             */
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        model.setColumnIdentifiers(columns);
        tableau.setModel(model);

        System.out.println("Calcule hash :");

        Object[] row = new Object[columns.length];

        // Fait la liste de fichier :
        listFichier(files, row, model);
    }

    /**
     * Analyse d'un ensemble de fichier.
     *
     * @param files LIste de fichier.
     * @param row La ligne.
     * @param model Le modèle du tableau.
     */
    private void listFichier(File[] files, Object[] row, DefaultTableModel model) {
        //System.out.println("add : " + liste_remarque.get(i).getId());
        for (int i = 0; i < files.length; i++) {
            if (files[i].isDirectory()) {
                listFichier(files[i].listFiles(), row, model);
            } else {
                addFile(files[i], row, model);
                System.out.println((i + 1) + "/" + files.length);
            }
        }
    }

    /**
     * Ajoute un fichier à la liste.
     *
     * @param file Le fichier.
     * @param row La ligne.
     * @param model Le modèle du tableau.
     */
    private void addFile(File file, Object[] row, DefaultTableModel model) {
        row[0] = file.getName();

        try {
            row[1] = Utils.MD5(file);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        row[2] = "";

        model.addRow(row);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        L_source = new javax.swing.JLabel();
        SP_fichiers_sources = new javax.swing.JScrollPane();
        T_fichiers_sources = new javax.swing.JTable();
        L_destination = new javax.swing.JLabel();
        SP_fichiers_destination = new javax.swing.JScrollPane();
        T_fichier_destination = new javax.swing.JTable();
        B_tout_est_ok = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MD5 de fichier 1.0.0");

        L_source.setText("Source");

        T_fichiers_sources.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        SP_fichiers_sources.setViewportView(T_fichiers_sources);

        L_destination.setText("Destination");

        T_fichier_destination.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        SP_fichiers_destination.setViewportView(T_fichier_destination);

        B_tout_est_ok.setText("Tout est ok");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(179, 179, 179)
                .addComponent(L_source)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(L_destination)
                .addGap(206, 206, 206))
            .addGroup(layout.createSequentialGroup()
                .addGap(199, 625, Short.MAX_VALUE)
                .addComponent(B_tout_est_ok)
                .addGap(195, 195, 195))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(SP_fichiers_sources, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SP_fichiers_destination, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L_source)
                    .addComponent(L_destination))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SP_fichiers_destination, javax.swing.GroupLayout.DEFAULT_SIZE, 517, Short.MAX_VALUE)
                    .addComponent(SP_fichiers_sources))
                .addGap(30, 30, 30)
                .addComponent(B_tout_est_ok)
                .addGap(0, 19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_tout_est_ok;
    private javax.swing.JLabel L_destination;
    private javax.swing.JLabel L_source;
    private javax.swing.JScrollPane SP_fichiers_destination;
    private javax.swing.JScrollPane SP_fichiers_sources;
    private javax.swing.JTable T_fichier_destination;
    private javax.swing.JTable T_fichiers_sources;
    // End of variables declaration//GEN-END:variables
}
